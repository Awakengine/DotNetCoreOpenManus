@page "/user-management"
@layout EmptyLayout
@using OpenManus.WebUI.Models
@using OpenManus.WebUI.Services
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>用户管理</PageTitle>

<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>用户管理 - OpenManus</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
</head>
<body>

<div class="user-management-container">
    <div class="user-management-card">
        <div class="text-center mb-4">
            <div class="logo-container">
                <i class="fas fa-robot logo-icon"></i>
            </div>
            <h3>@(isLoginMode ? "欢迎回来" : "创建账户")</h3>
            <p class="subtitle">@(isLoginMode ? "登录到 OpenManus" : "加入 OpenManus 社区")</p>
        </div>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success" role="alert">
                @successMessage
            </div>
        }
        
        <EditForm Model="@userForm" OnValidSubmit="@HandleSubmit" FormName="UserManagementForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            
            <div class="mb-3">
                <label for="userName" class="form-label">
                    <i class="fas fa-user me-2"></i>用户名
                </label>
                <InputText id="userName" class="form-control" @bind-Value="userForm.Name" placeholder="@(isLoginMode ? "输入您的用户名" : "创建一个独特的用户名")" />
                <ValidationMessage For="@(() => userForm.Name)" />
            </div>
            
            @if (!isLoginMode)
            {
                <div class="mb-3">
                    <label for="userAvatar" class="form-label">
                        <i class="fas fa-image me-2"></i>头像URL（可选）
                    </label>
                    <InputText id="userAvatar" class="form-control" @bind-Value="userForm.Avatar" placeholder="输入头像图片链接，让您的账户更个性化" />
                </div>
            }
            
            <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>@(isLoginMode ? "登录中..." : "注册中...")</span>
                    }
                    else
                    {
                        <i class="fas @(isLoginMode ? "fa-sign-in-alt" : "fa-user-plus") me-2"></i>
                        <span>@(isLoginMode ? "立即登录" : "创建账户")</span>
                    }
                </button>
            </div>
        </EditForm>
        
        <div class="text-center mt-3">
            <button class="btn btn-link" @onclick="ToggleMode">
                <i class="fas @(isLoginMode ? "fa-user-plus" : "fa-sign-in-alt") me-2"></i>
                @(isLoginMode ? "还没有账号？立即注册" : "已有账号？快速登录")
            </button>
        </div>
        
        <div class="text-center mt-2">
            <button class="btn btn-guest" @onclick="LoginAsGuest">
                <i class="fas fa-user-secret me-2"></i>游客模式
                <span class="guest-subtitle">快速体验，无需注册</span>
            </button>
        </div>
    </div>
</div>

<style>
    .user-management-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        position: relative;
        overflow: hidden;
    }
    
    .user-management-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="%23ffffff" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>') repeat;
        opacity: 0.3;
    }
    
    .user-management-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(255, 255, 255, 0.2);
        padding: 3rem;
        width: 100%;
        max-width: 450px;
        border: none;
        position: relative;
        z-index: 1;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .user-management-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15), 0 0 0 1px rgba(255, 255, 255, 0.3);
    }
    
    .logo-container {
        margin-bottom: 1.5rem;
    }
    
    .logo-icon {
        font-size: 3rem;
        color: #667eea;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        filter: drop-shadow(0 2px 4px rgba(102, 126, 234, 0.3));
    }
    
    .user-management-card h3 {
        color: #2c3e50;
        font-weight: 700;
        margin-bottom: 0.5rem;
        text-align: center;
        font-size: 1.8rem;
    }
    
    .subtitle {
        color: #7f8c8d;
        font-size: 1rem;
        margin-bottom: 2rem;
        font-weight: 400;
    }
    
    .form-label {
        color: #34495e;
        font-weight: 600;
        margin-bottom: 0.5rem;
        font-size: 0.95rem;
    }
    
    .form-control {
        border-radius: 12px;
        border: 2px solid #e8ecf0;
        padding: 1rem 1.25rem;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: rgba(248, 249, 250, 0.8);
    }
    
    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.15);
        background: white;
        transform: translateY(-1px);
    }
    
    .form-control::placeholder {
        color: #95a5a6;
        font-style: italic;
    }
    
    .btn {
        border-radius: 12px;
        padding: 1rem 2rem;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s ease;
        border: none;
        position: relative;
        overflow: hidden;
    }
    
    .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s;
    }
    
    .btn:hover::before {
        left: 100%;
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
    }
    
    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 25px rgba(102, 126, 234, 0.4);
        background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
    }
    
    .btn-primary:active {
        transform: translateY(0);
    }
    
    .btn-link {
        color: #667eea;
        text-decoration: none;
        font-weight: 500;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        transition: all 0.3s ease;
    }
    
    .btn-link:hover {
        color: #5a6fd8;
        background: rgba(102, 126, 234, 0.1);
        text-decoration: none;
        transform: translateY(-1px);
    }
    
    .btn-guest {
        background: linear-gradient(135deg, rgba(255, 193, 7, 0.1) 0%, rgba(255, 152, 0, 0.1) 100%);
        border: 2px solid #ffc107;
        color: #f39c12;
        backdrop-filter: blur(10px);
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 1rem 2rem;
        min-height: 70px;
        justify-content: center;
    }
    
    .btn-guest:hover {
        background: linear-gradient(135deg, #ffc107 0%, #ff9800 100%);
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(255, 193, 7, 0.4);
    }
    
    .guest-subtitle {
        font-size: 0.75rem;
        font-weight: 400;
        margin-top: 0.25rem;
        opacity: 0.8;
    }
    
    .btn-outline-secondary {
        background: rgba(108, 117, 125, 0.1);
        border: 2px solid #6c757d;
        color: #6c757d;
        backdrop-filter: blur(10px);
    }
    
    .btn-outline-secondary:hover {
        background: #6c757d;
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(108, 117, 125, 0.3);
    }
    
    .alert {
        border-radius: 12px;
        margin-bottom: 1.5rem;
        padding: 1rem 1.25rem;
        border: none;
        font-weight: 500;
    }
    
    .alert-danger {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
        color: white;
    }
    
    .alert-success {
        background: linear-gradient(135deg, #51cf66 0%, #40c057 100%);
        color: white;
    }
    
    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }
    
    .mb-3 {
        margin-bottom: 1.5rem !important;
    }
    
    .mt-3 {
        margin-top: 2rem !important;
    }
    
    .mt-2 {
        margin-top: 1rem !important;
    }
    
    .d-grid {
        margin-top: 1rem;
    }
    
    .validation-message {
        color: #e74c3c;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        font-weight: 500;
    }
    
    /* 响应式设计 */
    @@media (max-width: 768px) {
        .user-management-container {
            padding: 10px;
            min-height: 100vh;
        }
        
        .user-management-card {
            padding: 2rem 1.5rem;
            max-width: 100%;
            margin: 0;
        }
        
        .user-management-card h3 {
            font-size: 1.5rem;
        }
        
        .btn {
            padding: 0.875rem 1.5rem;
        }
    }
    
    @@media (max-width: 480px) {
        .user-management-card {
            padding: 1.5rem 1rem;
        }
        
        .form-control {
            padding: 0.875rem 1rem;
        }
    }
</style>

@code {
    [SupplyParameterFromForm]
    private UserFormModel userForm { get; set; } = new();
    private bool isLoginMode = true;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    
    public class UserFormModel
    {
        [Required(ErrorMessage = "用户名不能为空")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "用户名长度必须在2-50个字符之间")]
        public string Name { get; set; } = string.Empty;
        
        public string Avatar { get; set; } = string.Empty;
    }
    
    private void ToggleMode()
    {
        isLoginMode = !isLoginMode;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        userForm = new UserFormModel();
    }
    
    private async Task HandleSubmit()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        
        try
        {
            if (isLoginMode)
            {
                // 登录逻辑 - 查找现有用户
                var users = await UserService.GetAllUsersAsync();
                var existingUser = users.FirstOrDefault(u => u.Name.Equals(userForm.Name, StringComparison.OrdinalIgnoreCase) && u.Type == UserType.Registered);
                
                if (existingUser != null)
                {
                    // 更新用户活动时间
                    await UserService.UpdateUserActivityAsync(existingUser.Id);
                    
                    // 设置当前用户
                    await UserService.SetCurrentUserIdAsync(existingUser.Id);
                    
                    successMessage = $"欢迎回来，{existingUser.Name}！";
                    
                    // 延迟跳转到主页
                    await Task.Delay(1000);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = "用户不存在，请检查用户名或选择注册。";
                }
            }
            else
            {
                // 注册逻辑
                var users = await UserService.GetAllUsersAsync();
                var existingUser = users.FirstOrDefault(u => u.Name.Equals(userForm.Name, StringComparison.OrdinalIgnoreCase));
                
                if (existingUser != null)
                {
                    errorMessage = "用户名已存在，请选择其他用户名。";
                }
                else
                {
                    // 创建新用户
                    var newUser = await UserService.CreateRegisteredUserAsync(userForm.Name, userForm.Avatar);
                    
                    // 设置当前用户
                    await UserService.SetCurrentUserIdAsync(newUser.Id);
                    
                    successMessage = $"注册成功！欢迎，{newUser.Name}！";
                    
                    // 延迟跳转到主页
                    await Task.Delay(1000);
                    Navigation.NavigateTo("/");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"操作失败：{ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoginAsGuest()
    {
        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            // 创建游客用户
            var guestUser = await UserService.CreateGuestUserAsync();
            
            // 设置当前用户
            await UserService.SetCurrentUserIdAsync(guestUser.Id);
            
            successMessage = $"已进入游客模式！";
            
            // 延迟跳转到主页
            await Task.Delay(1000);
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"游客登录失败：{ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}

</body>
</html>
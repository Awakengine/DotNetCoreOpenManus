@page "/user-management"
@layout EmptyLayout
@using OpenManus.WebUI.Models
@using OpenManus.WebUI.Services
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>用户管理</PageTitle>

<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>用户管理 - OpenManus</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="~/js/app.js"></script>
</head>
<body>

<div class="user-management-container">
    <div class="user-management-card">
        <div class="text-center mb-4">
            <div class="logo-container">
                <i class="fas fa-robot logo-icon"></i>
            </div>
            <h3>@(isLoginMode ? "欢迎回来" : "创建账户")</h3>
            <p class="subtitle">@(isLoginMode ? "登录到 OpenManus" : "加入 OpenManus 社区")</p>
        </div>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success" role="alert">
                @successMessage
            </div>
        }
        
        <EditForm Model="@userForm" OnValidSubmit="@HandleSubmit" FormName="UserManagementForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            
            <div class="mb-3">
                <label for="userName" class="form-label">
                    <i class="fas fa-user me-2"></i>用户名
                </label>
                <InputText id="userName" class="form-control" @bind-Value="userForm.Name" placeholder="@(isLoginMode ? "输入您的用户名" : "创建一个独特的用户名")" />
                <ValidationMessage For="@(() => userForm.Name)" />
            </div>
            
            @if (!isLoginMode)
            {
                <div class="mb-3">
                    <label for="userAvatar" class="form-label">
                        <i class="fas fa-image me-2"></i>头像URL（可选）
                    </label>
                    <InputText id="userAvatar" class="form-control" @bind-Value="userForm.Avatar" placeholder="输入头像图片链接，让您的账户更个性化" />
                </div>
            }
            
            <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>@(isLoginMode ? "登录中..." : "注册中...")</span>
                    }
                    else
                    {
                        <i class="fas @(isLoginMode ? "fa-sign-in-alt" : "fa-user-plus") me-2"></i>
                        <span>@(isLoginMode ? "立即登录" : "创建账户")</span>
                    }
                </button>
            </div>
        </EditForm>
        
        <div class="text-center mt-3">
            <button class="btn btn-link" @onclick="ToggleMode">
                <i class="fas @(isLoginMode ? "fa-user-plus" : "fa-sign-in-alt") me-2"></i>
                @(isLoginMode ? "还没有账号？立即注册" : "已有账号？快速登录")
            </button>
        </div>
        
        <div class="text-center mt-2">
            <button class="btn btn-guest" @onclick="LoginAsGuest">
                <i class="fas fa-user-secret me-2"></i>游客模式
                <span class="guest-subtitle">快速体验，无需注册</span>
            </button>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private UserFormModel userForm { get; set; } = new();
    private bool isLoginMode = true;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    
    public class UserFormModel
    {
        [Required(ErrorMessage = "用户名不能为空")]
        [StringLength(20, MinimumLength = 2, ErrorMessage = "用户名长度必须在2-20个字符之间")]
        public string Name { get; set; } = string.Empty;
        
        [Url(ErrorMessage = "请输入有效的URL地址")]
        public string Avatar { get; set; } = string.Empty;
    }
    
    private void ToggleMode()
    {
        isLoginMode = !isLoginMode;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        userForm = new UserFormModel();
    }
    
    private async Task HandleSubmit()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        
        try
        {
            if (string.IsNullOrWhiteSpace(userForm.Name))
            {
                errorMessage = "请输入用户名。";
                return;
            }
            
            if (isLoginMode)
            {
                // 登录逻辑 - 验证用户
                var existingUser = await UserService.ValidateUserLoginAsync(userForm.Name);
                
                if (existingUser != null)
                {
                    // 设置当前用户
                    await UserService.SetCurrentUserIdAsync(existingUser.Id);
                    
                    successMessage = $"欢迎回来，{existingUser.Name}！";
                    
                    // 延迟跳转到主页
                    await Task.Delay(1000);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = "用户不存在，请检查用户名或选择注册。";
                }
            }
            else
            {
                // 注册逻辑 - 检查用户名是否已存在
                var existingUser = await UserService.GetUserByNameAsync(userForm.Name);
                
                if (existingUser != null)
                {
                    errorMessage = "用户名已存在，请选择其他用户名。";
                }
                else
                {
                    // 验证用户名格式
                    if (userForm.Name.Length < 2)
                    {
                        errorMessage = "用户名至少需要2个字符。";
                        return;
                    }
                    
                    if (userForm.Name.Length > 20)
                    {
                        errorMessage = "用户名不能超过20个字符。";
                        return;
                    }
                    
                    // 创建新用户
                    var newUser = await UserService.CreateRegisteredUserAsync(userForm.Name, userForm.Avatar ?? string.Empty);
                    
                    // 设置当前用户
                    await UserService.SetCurrentUserIdAsync(newUser.Id);
                    
                    successMessage = $"注册成功！欢迎，{newUser.Name}！";
                    
                    // 延迟跳转到主页
                    await Task.Delay(1000);
                    Navigation.NavigateTo("/");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"操作失败：{ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoginAsGuest()
    {
        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            // 获取浏览器指纹
            var browserFingerprint = await JSRuntime.InvokeAsync<string>("getBrowserFingerprintId");
            
            if (string.IsNullOrEmpty(browserFingerprint))
            {
                errorMessage = "无法获取浏览器指纹，请刷新页面重试。";
                return;
            }
            
            // 根据浏览器指纹获取或创建游客用户
            var guestUser = await UserService.GetOrCreateGuestUserByFingerprintAsync(browserFingerprint);
            
            // 设置当前用户
            await UserService.SetCurrentUserIdAsync(guestUser.Id);
            
            successMessage = $"已进入游客模式！欢迎，{guestUser.Name}";
            
            // 延迟跳转到主页
            await Task.Delay(1000);
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"游客登录失败：{ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}

</body>
</html>
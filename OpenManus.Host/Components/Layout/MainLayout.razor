@using Microsoft.AspNetCore.Components.Web
@using OpenManus.Host.Services
@using OpenManus.Host.Components
@namespace OpenManus.Host.Components.Layout
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@* @inject SessionManagementService SessionService *@
@inject ChatService ChatService
@inject IConfigurationService ConfigurationService
@inject ILogger<MainLayout> Logger

<div class="layout-container">
    <!-- 左侧对话历史列表 -->
    <div class="chat-history-panel">
        <div class="panel-header">
            <h5 class="panel-title">对话历史</h5>
            <button class="btn-new-chat" title="新建对话" @onclick="CreateNewChat">
                <i class="fas fa-plus"></i>
            </button>
        </div>
        <div class="chat-history-list">
            @foreach (var session in chatSessions)
            {
                <div class="chat-item @(session.Id == currentSessionId ? "active" : "")" @onclick="() => SwitchToSession(session.Id)">
                    <div class="chat-title">@session.Title</div>
                    <div class="chat-time">@session.LastActivity.ToString("MM/dd HH:mm")</div>
                    <div class="chat-actions">
                        <button class="btn-delete" title="删除对话" @onclick="() => DeleteSession(session.Id)" @onclick:stopPropagation="true">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            }
            @if (!chatSessions.Any())
            {
                <div class="empty-history">
                    <i class="fas fa-comments text-muted"></i>
                    <p class="text-muted">暂无对话历史</p>
                </div>
            }
        </div>
        
        <!-- 底部用户信息和设置区域 -->
        <div class="chat-history-footer">
            <div class="user-info">
                <div class="user-avatar">
                    <i class="fas fa-user"></i>
                </div>
                <div class="user-details">
                    <div class="user-name">用户</div>
                    <div class="user-status">在线</div>
                </div>
            </div>
            <div class="footer-actions">
                <button class="btn-settings" title="设置" @onclick="OpenSettings">
                    <i class="fas fa-cog"></i>
                </button>
                <button class="btn-help" title="帮助" @onclick="OpenHelp">
                    <i class="fas fa-question-circle"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- 右侧内容区域 -->
    <div class="content-area">
        <!-- 对话内容区 -->
        <div class="chat-content-panel">
            <div class="panel-header">
                <h5 class="panel-title">@GetCurrentSessionTitle()</h5>
                <div class="chat-controls">
                    <button class="btn-clear" title="清空对话" @onclick="ClearCurrentSession">
                        <i class="fas fa-trash"></i>
                    </button>
                    <button class="btn-settings" title="设置" @onclick="OpenSettings">
                        <i class="fas fa-cog"></i>
                    </button>
                    <button class="btn-toggle-preview" title="切换文件预览" @onclick="ToggleFilePreview">
                        <i class="fas fa-file-alt"></i>
                    </button>
                </div>
            </div>
            <main class="main-content">
                @Body
            </main>
        </div>

        <!-- 右侧文件预览区 -->
        <div class="file-preview-panel @(isFilePreviewVisible ? "" : "collapsed")" id="filePreviewPanel">
            <div class="panel-header">
                <h5 class="panel-title">文件预览</h5>
                <div class="panel-controls">
                    <button class="btn-dock" title="停靠/取消停靠" @onclick="ToggleDockMode">
                        <i class="fas @(isDocked ? "fa-expand" : "fa-thumbtack")"></i>
                    </button>
                    <button class="btn-collapse" title="折叠" @onclick="ToggleFilePreview">
                        <i class="fas @(isFilePreviewVisible ? "fa-chevron-right" : "fa-chevron-left")"></i>
                    </button>
                </div>
            </div>
            <div class="file-preview-content">
                @if (currentPreviewFile != null)
                {
                    <div class="file-info">
                        <h6><i class="fas fa-file-alt"></i> @currentPreviewFile.Name</h6>
                        <p class="file-path">@currentPreviewFile.Path</p>
                    </div>
                    <div class="file-content">
                        @if (isLoadingFile)
                        {
                            <div class="loading-spinner">
                                <i class="fas fa-spinner fa-spin"></i>
                                <p>正在加载文件内容...</p>
                            </div>
                        }
                        else
                        {
                            <pre><code>@currentPreviewFile.Content</code></pre>
                        }
                    </div>
                }
                else
                {
                    <div class="no-file-selected">
                        <i class="fas fa-file-alt"></i>
                        <p>选择一个文件进行预览</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- 设置弹框 -->
<SettingsModal IsVisible="@isSettingsVisible" IsVisibleChanged="@OnSettingsVisibilityChanged" OnSettingsSaved="@OnSettingsSaved" />

@code {
    private List<ChatSessionInfo> chatSessions = new();
    private string currentSessionId = "default-session";
    private bool isFilePreviewVisible = true;
    private bool isDocked = false;
    private bool isLoadingFile = false;
    private FilePreviewInfo? currentPreviewFile;
    private bool isSettingsVisible = false;
    
    public class FilePreviewInfo
    {
        public string Name { get; set; } = string.Empty;
        public string Path { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty;
    }
    
    protected override async Task OnInitializedAsync()
    {
        // 临时简化实现
        chatSessions = new List<ChatSessionInfo>
        {
            new ChatSessionInfo
            {
                        Id = Guid.NewGuid().ToString(),
                Title = "当前对话",
                LastActivity = DateTime.Now,
                MessageCount = 0,
                CreatedAt = DateTime.Now
            }
        };
        StateHasChanged();
    }
    
    private async Task CreateNewChat()
    {
        // 测试抛出异常，看看是否调用了函数。
        // throw new NotImplementedException();
        
        Console.WriteLine("=== CreateNewChat 方法被调用 ===");
        Logger.LogInformation("=== CreateNewChat 方法被调用 ===");

        try
        {
            Console.WriteLine("开始创建新对话");
            Logger.LogInformation("开始创建新对话");

            // 创建新会话
            var newSession = new ChatSessionInfo
            {
                Id = Guid.NewGuid().ToString(),
                Title = $"新对话 {chatSessions.Count + 1}",
                LastActivity = DateTime.Now,
                MessageCount = 0,
                CreatedAt = DateTime.Now
            };
            System.Console.WriteLine($"创建新对话: 新对话 {chatSessions.Count + 1}");
            chatSessions.Insert(0, newSession);
            
            // 清空当前对话
            await ChatService.ClearMessagesAsync(newSession.Id);
            
            // 导航到新会话
            Navigation.NavigateTo($"/agent/{newSession.Id}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "创建新对话失败");
        }
    }
    
    private void SaveCurrentSessionMessages()
    {
        try
        {
            // 这里可以添加保存当前会话消息的逻辑
            // 由于消息已经通过ChatService自动保存，这里主要是更新会话元数据
            if (!string.IsNullOrEmpty(currentSessionId))
            {
                // 临时移除会话更新逻辑
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "保存当前会话失败");
        }
    }
    
    private void SwitchToSession(string sessionId)
    {
        try
        {
            currentSessionId = sessionId;
            Navigation.NavigateTo($"/agent/{sessionId}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "切换会话失败");
        }
    }

    private void DeleteSession(string sessionId)
    {
        try
        {
            // 从本地列表中删除会话
            chatSessions = chatSessions.Where(s => s.Id != sessionId).ToList();
            
            // 如果删除的是当前会话，导航到默认会话或创建新会话
            if (currentSessionId == sessionId)
            {
                if (chatSessions.Any())
                {
                    var firstSession = chatSessions.First();
                    Navigation.NavigateTo($"/agent/{firstSession.Id}");
                }
                else
                {
                    // 创建新会话
                    var newSession = new ChatSessionInfo
                    {
                        Id = Guid.NewGuid().ToString(),
                        Title = $"新对话 {chatSessions.Count + 1}",
                        LastActivity = DateTime.Now,
                        MessageCount = 0,
                        CreatedAt = DateTime.Now
                    };
                    chatSessions.Insert(0, newSession);
                    Navigation.NavigateTo($"/agent/{newSession.Id}");
                }
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "删除会话失败");
        }
    }
    
    private string GetCurrentSessionTitle()
    {
        var session = chatSessions.FirstOrDefault(s => s.Id == currentSessionId);
        return session?.Title ?? "AI 助手";
    }
    
    private void ClearCurrentSession()
    {
        // 这里可以添加清空当前会话的逻辑
        // 例如调用AgentService清空会话
        StateHasChanged();
    }
    
    private void ToggleFilePreview()
    {
        isFilePreviewVisible = !isFilePreviewVisible;
        StateHasChanged();
    }
    
    private void ToggleDockMode()
    {
        isDocked = !isDocked;
        StateHasChanged();
    }
    
    // JavaScript互操作方法已移除，改为直接使用实例方法
    
    // 实例方法用于显示文件预览
    public async Task ShowFilePreview(string fileName, string filePath, string content = "")
    {
        isLoadingFile = true;
        isFilePreviewVisible = true;
        
        currentPreviewFile = new FilePreviewInfo
        {
            Name = fileName,
            Path = filePath,
            Content = content
        };
        
        StateHasChanged();
        
        // 模拟加载文件内容
        if (string.IsNullOrEmpty(content))
        {
            await Task.Delay(1000); // 模拟加载时间
            currentPreviewFile.Content = $"// 文件内容示例\n// 文件: {fileName}\n// 路径: {filePath}\n\n// 这里显示实际的文件内容\nconsole.log('Hello from {fileName}');";
        }
        
        isLoadingFile = false;
        StateHasChanged();
    }
    
    public void CloseFilePreview()
    {
        currentPreviewFile = null;
        isFilePreviewVisible = false;
        StateHasChanged();
    }
    
    private void OpenSettings()
    {
        Console.WriteLine($"OpenSettings called, current isSettingsVisible: {isSettingsVisible}");
        isSettingsVisible = true;
        Console.WriteLine($"OpenSettings after setting, isSettingsVisible: {isSettingsVisible}");
        StateHasChanged();
        Console.WriteLine("StateHasChanged called");
    }
    
    private void OpenHelp()
    {
        // 这里可以添加打开帮助页面的逻辑
        // 例如导航到帮助页面或显示帮助模态框
        Console.WriteLine("打开帮助");
    }
    
    private async Task OnSettingsVisibilityChanged(bool isVisible)
    {
        isSettingsVisible = isVisible;
        StateHasChanged();
    }
    
    private async Task OnSettingsSaved()
    {
        // 设置保存后的处理逻辑
        // 可以在这里重新加载配置或更新UI
        StateHasChanged();
    }
}
@* 
    主布局组件 - 应用程序的主要布局结构
    包含左侧对话历史面板和右侧内容区域
    提供会话管理、设置和导航功能
*@
@using Microsoft.AspNetCore.Components.Web
@using OpenManus.Host.Models
@using OpenManus.Host.Services
@using OpenManus.Host.Components
@namespace OpenManus.Host.Components.Layout
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IChatHistoryService ChatHistoryService
@inject IConfigurationService ConfigurationService
@inject ILogger<MainLayout> Logger
@implements IDisposable

<div class="layout-container">
	<!-- 左侧对话历史列表 -->
	<div class="chat-history-panel">
		<div class="panel-header">
			<h5 class="panel-title">对话历史</h5>
			<button class="btn-new-chat" title="新建对话" @onclick="CreateNewChat">
				<i class="fas fa-plus"></i>
			</button>
		</div>
		<div class="chat-history-list">
			@if (chatSessions != null && chatSessions.Any())
			{
				@foreach (var session in chatSessions)
				{
					<div class="chat-item @(session.Id == currentSessionId ? "active" : "")" @onclick="() => SwitchToSession(session.Id)">
						<div class="chat-title">@session.Title</div>
						<div class="chat-time">@session.LastActivity.ToString("MM/dd HH:mm")</div>
						<div class="chat-actions">
							<button class="btn-delete" title="删除对话" @onclick="() => DeleteSession(session.Id)" @onclick:stopPropagation="true">
								<i class="fas fa-trash"></i>
							</button>
						</div>
					</div>
				}
			}
			else
			{
				<div class="empty-history">
					<i class="fas fa-comments text-muted"></i>
					<p class="text-muted">暂无对话历史</p>
				</div>
			}
		</div>

		<!-- 底部用户信息和设置区域 -->
		<div class="chat-history-footer">
			<div class="user-info">
				<div class="user-avatar">
					<i class="fas fa-user"></i>
				</div>
				<div class="user-details">
					<div class="user-name">用户</div>
					<div class="user-status">在线</div>
				</div>
			</div>
			<div class="footer-actions">
				<button class="btn-settings" title="设置" @onclick="OpenSettings">
					<i class="fas fa-cog"></i>
				</button>
				<button class="btn-help" title="帮助" @onclick="OpenHelp">
					<i class="fas fa-question-circle"></i>
				</button>
			</div>
		</div>
	</div>

	<!-- 右侧内容区域 -->
	<div class="chat-content-panel">
		<div class="panel-header">
			<h5 class="panel-title">@GetCurrentSessionTitle()</h5>
			<div class="chat-controls">
				<button class="btn-clear" title="清空对话" @onclick="ClearCurrentSession">
					<i class="fas fa-trash"></i>
				</button>
				<button class="btn-settings" title="设置" @onclick="OpenSettings">
					<i class="fas fa-cog"></i>
				</button>
			</div>
		</div>
		<main class="main-content">
			@Body
		</main>
	</div>
</div>

<!-- 设置弹框 -->
<SettingsModal IsVisible="@isSettingsVisible" IsVisibleChanged="@OnSettingsVisibilityChanged" OnSettingsSaved="@OnSettingsSaved" />

@code {
	/// <summary>
	/// 聊天会话列表
	/// </summary>
	private List<ChatSessionInfo> chatSessions = new();

	/// <summary>
	/// 当前会话ID
	/// </summary>
	private string currentSessionId = "default-session";

	/// <summary>
	/// 设置模态框是否可见
	/// </summary>
	private bool isSettingsVisible = false;

	/// <summary>
	/// 组件初始化时执行
	/// 从ChatHistoryService加载会话列表
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		// 监听URL变化
		Navigation.LocationChanged += OnLocationChanged;
		
		// 从URL获取当前会话ID
		UpdateCurrentSessionIdFromUrl();
		
		await LoadChatSessionsAsync();
		StateHasChanged();
	}

	/// <summary>
	/// 加载聊天会话列表
	/// </summary>
	private async Task LoadChatSessionsAsync()
	{
		try
		{
			// 从聊天历史服务加载所有会话信息
			var allSessions = await ChatHistoryService.GetAllSessionsAsync();
			
			chatSessions = allSessions.Select(kvp => new ChatSessionInfo
			{
				Id = kvp.Key,
				Title = kvp.Value.Messages?.FirstOrDefault(m => m.Role == "user")?.Content?.Substring(0, Math.Min(30, kvp.Value.Messages.FirstOrDefault(m => m.Role == "user")?.Content?.Length ?? 0)) + "..." ?? "新对话",
				LastActivity = kvp.Value.Messages?.LastOrDefault()?.Timestamp ?? DateTime.Now,
				MessageCount = kvp.Value.Messages?.Count(m => m.Role != "system") ?? 0,
				CreatedAt = kvp.Value.Messages?.FirstOrDefault()?.Timestamp ?? DateTime.Now
			}).OrderByDescending(s => s.LastActivity).ToList();
			
			// 如果没有会话，创建一个默认会话
			if (!chatSessions.Any())
			{
				chatSessions = new List<ChatSessionInfo>
				{
					new ChatSessionInfo
					{
						Id = currentSessionId,
						Title = "新对话",
						LastActivity = DateTime.Now,
						MessageCount = 0,
						CreatedAt = DateTime.Now
					}
				};
			}
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "加载会话列表失败");
			// 创建默认会话作为后备
			chatSessions = new List<ChatSessionInfo>
			{
				new ChatSessionInfo
				{
					Id = currentSessionId,
					Title = "新对话",
					LastActivity = DateTime.Now,
					MessageCount = 0,
					CreatedAt = DateTime.Now
				}
			};
		}
	}

	/// <summary>
	/// 创建新的聊天会话
	/// 生成新的会话ID，清空消息历史，并导航到新会话
	/// </summary>
	private async Task CreateNewChat()
	{
		Console.WriteLine("=== CreateNewChat 方法被调用 ===");
		Logger.LogInformation("=== CreateNewChat 方法被调用 ===");

		try
		{
			Console.WriteLine("开始创建新对话");
			Logger.LogInformation("开始创建新对话");

			// 生成新的会话ID
			var newSessionId = Guid.NewGuid().ToString();
			currentSessionId = newSessionId;

			// 在ChatHistoryService中初始化新会话
			await ChatHistoryService.GetSessionMemoryAsync(newSessionId);

			// 重新加载会话列表
			await LoadChatSessionsAsync();

			// 导航到新会话
			Navigation.NavigateTo($"/agent/{newSessionId}");
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "创建新对话失败");
		}
	}

	/// <summary>
	/// 保存当前会话的消息
	/// 更新会话元数据，消息通过ChatService自动保存
	/// </summary>
	private void SaveCurrentSessionMessages()
	{
		try
		{
			// 这里可以添加保存当前会话消息的逻辑
			// 由于消息已经通过ChatService自动保存，这里主要是更新会话元数据
			if (!string.IsNullOrEmpty(currentSessionId))
			{
				// 临时移除会话更新逻辑
			}
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "保存当前会话失败");
		}
	}

	/// <summary>
	/// 切换到指定的会话
	/// 更新当前会话ID并导航到对应页面
	/// </summary>
	/// <param name="sessionId">要切换到的会话ID</param>
	private void SwitchToSession(string sessionId)
	{
		try
		{
			if (sessionId == currentSessionId) return;
			
			currentSessionId = sessionId;
			Navigation.NavigateTo($"/agent/{sessionId}");
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "切换会话失败");
		}
	}

	/// <summary>
	/// 删除指定的会话
	/// 如果删除的是当前会话，则自动切换到其他会话或创建新会话
	/// </summary>
	/// <param name="sessionId">要删除的会话ID</param>
	private async Task DeleteSession(string sessionId)
	{
		try
		{
			// 从ChatHistoryService删除会话
			await ChatHistoryService.DeleteSessionAsync(sessionId);

			// 重新加载会话列表
			await LoadChatSessionsAsync();

			// 如果删除的是当前会话，导航到其他会话或创建新会话
			if (currentSessionId == sessionId)
			{
				if (chatSessions.Any())
				{
					var firstSession = chatSessions.First();
					currentSessionId = firstSession.Id;
					Navigation.NavigateTo($"/agent/{firstSession.Id}");
				}
				else
				{
					// 创建新会话
					await CreateNewChat();
				}
			}

			StateHasChanged();
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "删除会话失败");
		}
	}

	/// <summary>
	/// 获取当前会话的标题
	/// 如果找不到会话则返回默认标题
	/// </summary>
	/// <returns>会话标题</returns>
	private string GetCurrentSessionTitle()
	{
		var session = chatSessions.FirstOrDefault(s => s.Id == currentSessionId);
		return session?.Title ?? "AI 助手";
	}

	/// <summary>
	/// 清空当前会话的内容
	/// 调用AgentService清空会话消息
	/// </summary>
	private void ClearCurrentSession()
	{
		// 这里可以添加清空当前会话的逻辑
		// 例如调用AgentService清空会话
		StateHasChanged();
	}

	/// <summary>
	/// 打开设置模态框
	/// 设置可见性状态并刷新UI
	/// </summary>
	private void OpenSettings()
	{
		Console.WriteLine($"OpenSettings called, current isSettingsVisible: {isSettingsVisible}");
		isSettingsVisible = true;
		Console.WriteLine($"OpenSettings after setting, isSettingsVisible: {isSettingsVisible}");
		StateHasChanged();
		Console.WriteLine("StateHasChanged called");
	}

	/// <summary>
	/// 打开帮助页面或帮助模态框
	/// 提供用户使用指导
	/// </summary>
	private void OpenHelp()
	{
		// 这里可以添加打开帮助页面的逻辑
		// 例如导航到帮助页面或显示帮助模态框
		Console.WriteLine("打开帮助");
	}

	/// <summary>
	/// 设置模态框可见性变化时的回调
	/// 更新本地状态并刷新UI
	/// </summary>
	/// <param name="isVisible">模态框是否可见</param>
	private async Task OnSettingsVisibilityChanged(bool isVisible)
	{
		isSettingsVisible = isVisible;
		StateHasChanged();
		await Task.Delay(1);
	}

	/// <summary>
	/// 设置保存后的处理逻辑
	/// 重新加载配置或更新UI
	/// </summary>
	private async Task OnSettingsSaved()
	{
		// 设置保存后的处理逻辑
		// 可以在这里重新加载配置或更新UI
		StateHasChanged();
		await Task.Delay(1);
	}

	/// <summary>
	/// URL变化时的处理方法
	/// 更新当前会话ID并刷新UI
	/// </summary>
	/// <param name="sender">事件发送者</param>
	/// <param name="e">位置变化事件参数</param>
	private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
	{
		try
		{
			var previousSessionId = currentSessionId;
			UpdateCurrentSessionIdFromUrl();
			
			// 如果会话ID发生变化，重新加载会话列表
			if (currentSessionId != previousSessionId)
			{
				await InvokeAsync(async () =>
				{
					await LoadChatSessionsAsync();
					StateHasChanged();
				});
			}
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "处理URL变化时发生错误");
		}
	}

	/// <summary>
	/// 从当前URL更新会话ID
	/// 解析URL路径获取会话ID参数
	/// </summary>
	private void UpdateCurrentSessionIdFromUrl()
	{
		try
		{
			var uri = new Uri(Navigation.Uri);
			var segments = uri.AbsolutePath.Split('/', StringSplitOptions.RemoveEmptyEntries);
			
			// 检查URL格式是否为 /agent/{sessionId}
			if (segments.Length >= 2 && segments[0].Equals("agent", StringComparison.OrdinalIgnoreCase))
			{
				currentSessionId = segments[1];
				Logger.LogInformation($"从URL更新会话ID: {currentSessionId}");
			}
			else if (segments.Length >= 1 && segments[0].Equals("agent", StringComparison.OrdinalIgnoreCase))
			{
				// 如果只有/agent路径，使用默认会话ID
				currentSessionId = "default-session";
				Logger.LogInformation("使用默认会话ID: default-session");
			}
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "从URL更新会话ID时发生错误");
			currentSessionId = "default-session";
		}
	}

	/// <summary>
	/// 释放资源
	/// 取消URL变化事件监听
	/// </summary>
	public void Dispose()
	{
		Navigation.LocationChanged -= OnLocationChanged;
	}
}